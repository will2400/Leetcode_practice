public class Solution {
    class Pair{
        int[] pair;
        int index;
        long sum;
        Pair(int index, int n1, int n2){
            this.index = index;
            pair = new int[]{n1, n2};
            sum = (long)n1 + (long)n2;
        }
    }
        
    class comp implements Comparator<Pair>{
        public int compare(Pair p1, Pair p2){
            return Long.compare(p1.sum, p2.sum);
        }
    }
    
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> res = new ArrayList<int[]>();
        if(nums1 == null || nums2 == null || nums1.length == 0 || nums2.length ==0){
            return res;
        }
        int len1 = nums1.length;
        int len2 = nums2.length;
        PriorityQueue<Pair> q = new PriorityQueue(k, new comp());
        
        for(int i=0; i<nums1.length && i<k ; i++){
            q.offer(new Pair(0, nums1[i], nums2[0]));
        }
        for (int i=1; i<=k && !q.isEmpty(); i++) { // get the first k sums
            Pair p = q.poll(); 
            res.add( p.pair );
            if (p.index < len2 -1 ) { // get to next value in nums2
                int next = p.index+1;
                q.offer( new Pair(next, p.pair[0], nums2[next]) );
            }
        }
        return res;
    }
}
