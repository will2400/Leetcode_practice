public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix ==null ||matrix.length == 0 || matrix[0].length ==0){
            return 0;
        }
        
        int[][] men = new int[matrix.length][matrix[0].length];
        int longest =0;
        for(int i=0; i<matrix.length;i++){
            for(int j=0; j<matrix[0].length; j++){
                longest = Math.max(longest, dfs(matrix,i,j,men));
            }
        }
        return longest;
    }
    
    public int dfs(int[][] matrix, int i, int j, int[][] men){
        if(men[i][j] != 0){
            return men[i][j];
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int[] dx = {-1, 0, 1, 0};
        int[] dy = {0, 1, 0, -1};
        
        for(int k =0; k<4; k++){
            int x = i+dx[k];
            int y = j+dy[k];
            
            if(x>=0 && x<m && y>=0 && y<n && matrix[x][y]>matrix[i][j]){
                men[i][j] = Math.max(men[i][j],dfs(matrix,x,y,men));
            }
        }
        return ++men[i][j];

    }
}
