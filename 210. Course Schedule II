public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(numCourses <= 0){
            return new int[]{};
        }
        
        int[] res = new int[numCourses];
        for(int i = 0; i < numCourses; i++){
            res[i] = i;
        }
        
        if(prerequisites == null || prerequisites.length == 0){
            return res;
        }
        
        int[] indegree = new int[numCourses];
        for(int[] edge : prerequisites){
            indegree[edge[0]]++;
        }
        
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                queue.offer(i);
            }
        }
        
        int index = 0;
        while(!queue.isEmpty()){
            int source = queue.poll();
            res[index++] = source;
            for(int[] edge : prerequisites){
                if(edge[1] == source){
                    indegree[edge[0]]--;
                    if(indegree[edge[0]] == 0){
                        queue.offer(edge[0]);
                    }
                }
            }
        }
        
        if(index == numCourses){
            return res;
        }else{
            return new int[]{};
        }
    }
}
