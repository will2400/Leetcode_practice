public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(nums == null){
            return res;
        }
        
        if(nums.length == 0){
            res.add(new ArrayList<Integer>());
            return res;
        }
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<Integer>();
        int[] visited = new int[nums.length];
        
        helper(res, list, visited, nums);
        return res;
        
    }
    
    public void helper(List<List<Integer>> res, List<Integer> list, int[] visited, int[] nums){
        if(list.size() == nums.length){
            res.add(new ArrayList<Integer>(list));
        }
        
        for(int i=0; i<nums.length; i++){
            if(visited[i] ==1 || ( i != 0 && nums[i] == nums[i-1] && visited[i-1] == 0)){
                continue;
            }
            
            visited[i] =1;
            list.add(nums[i]);
            helper(res, list, visited, nums);
            list.remove(list.size()-1);
            visited[i] =0;
        }
    }
}
